name: "Collect Codex Review Inputs"
description: "Fetch diff, existing comments, review threads, and other metadata required for Codex review."
inputs:
  github-token:
    description: "GitHub token with repo scope"
    required: true
runs:
  using: "composite"
  steps:
    - name: Collect review context
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        set -euo pipefail

        git diff --unified=5 origin/${{ github.event.pull_request.base.ref }}...${{ github.event.pull_request.head.sha }} > diff.txt

        gh api repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments --paginate --jq '.[]' > existing_issue_comments.jsonl
        jq -s 'map({user: .user.login, body: .body})' existing_issue_comments.jsonl > existing_issue_comments.json

        gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews --paginate --jq '.[]' > existing_reviews.jsonl
        jq -s '[.[] | {id: .id, state: .state, body: .body, submitted_at: .submitted_at, user: (.user.login), comments: (.comments_url)}]' existing_reviews.jsonl > existing_reviews.json

        gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/comments --paginate --jq '.[]' > existing_review_comments.jsonl
        jq -s '[.[] | {id: .id, review_id: .pull_request_review_id, in_reply_to_id: .in_reply_to_id, path: .path, line: (.line // .original_line // .original_start_line), start_line: .start_line, position: .position, body: .body, side: .side, commit_id: .commit_id, created_at: .created_at, updated_at: .updated_at, user: (.user.login)}]' existing_review_comments.jsonl > existing_review_comments.json

        repo_full="${{ github.repository }}"
        repo_owner="${repo_full%%/*}"
        repo_name="${repo_full#*/}"
        gh api graphql --paginate \
          -f query='query($owner:String!, $name:String!, $number:Int!, $after:String){ repository(owner:$owner, name:$name) { pullRequest(number:$number) { reviewThreads(first:100, after:$after) { nodes { id isResolved comments(first:100) { nodes { id path originalLine line body createdAt updatedAt author { login } } } } pageInfo { hasNextPage endCursor } } } } }' \
          -F owner="$repo_owner" \
          -F name="$repo_name" \
          -F number="${{ github.event.pull_request.number }}" \
          --jq '(.data.repository.pullRequest.reviewThreads.nodes // [])' > existing_review_threads.jsonl
        jq -s '[.[] | .[] | {id: .id, resolved: .isResolved, comments: ((.comments.nodes // []) | map({id: .id, path: .path, line: (.line // .originalLine), body: .body, created_at: .createdAt, updated_at: .updatedAt, author: (.author.login)}))}]' existing_review_threads.jsonl > existing_review_threads.json

        gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files --paginate --jq '.[]' > files.jsonl
        jq -s '[.[] | select(.patch != null) | {path: .filename, patch: .patch}]' files.jsonl > files.json

        cat <<EOF > review_metadata.json
        {
          "repository": "${{ github.repository }}",
          "pull_number": ${{ github.event.pull_request.number }},
          "base_ref": "${{ github.event.pull_request.base.ref }}",
          "base_sha": "${{ github.event.pull_request.base.sha }}",
          "head_sha": "${{ github.event.pull_request.head.sha }}"
        }
        EOF
